diff --git a/core/main/Cargo.toml b/core/main/Cargo.toml
index d551210..655cbbc 100644
--- a/core/main/Cargo.toml
+++ b/core/main/Cargo.toml
@@ -44,6 +44,7 @@ serde = { version = "1.0", features = ["derive"] }
 arrayvec = "0.7.2"
 regex = "=1.7.3"
 serde_json = "1.0"
+env-file-reader = "0.2.0"
 base64 = "0.13.0"
 sd-notify = { version = "0.4.1", optional = true }
 exitcode = "1.1.2"
diff --git a/core/main/src/processor/metrics_processor.rs b/core/main/src/processor/metrics_processor.rs
index 92e74ca..5afe67a 100644
--- a/core/main/src/processor/metrics_processor.rs
+++ b/core/main/src/processor/metrics_processor.rs
@@ -81,7 +81,7 @@ pub async fn update_app_context(
     if let Some(app) = ps.app_manager_state.get(&ctx.app_id) {
         context.app_session_id = app.loaded_session_id.to_owned();
         context.app_user_session_id = app.active_session_id;
-        context.app_version = SEMVER_LIGHTWEIGHT.to_string();
+        context.app_version = ps.version.clone().unwrap_or(String::from(SEMVER_LIGHTWEIGHT));
     }
     if let Some(session) = ps.session_state.get_account_session() {
         context.partner_id = session.id;
@@ -130,7 +130,7 @@ pub async fn send_metric_for_app_state_change(
                 if let Some(app) = ps.app_manager_state.get(app_id) {
                     context.app_session_id = app.loaded_session_id.to_owned();
                     context.app_user_session_id = app.active_session_id;
-                    context.app_version = SEMVER_LIGHTWEIGHT.to_string();
+                    context.app_version = ps.version.clone().unwrap_or(String::from(SEMVER_LIGHTWEIGHT));
                 }
                 context.governance_state = Some(AppDataGovernanceState::new(tag_name_set));
                 context.partner_id = session.clone().id;
diff --git a/core/main/src/service/telemetry_builder.rs b/core/main/src/service/telemetry_builder.rs
index a7ed9f5..a758397 100644
--- a/core/main/src/service/telemetry_builder.rs
+++ b/core/main/src/service/telemetry_builder.rs
@@ -56,7 +56,7 @@ impl TelemetryBuilder {
                 app_version,
                 start_time: start_time.unwrap_or_default().timestamp_millis(),
                 ripple_session_id: ps.metrics.get_context().device_session_id,
-                ripple_version: String::from(SEMVER_LIGHTWEIGHT),
+                ripple_version: ps.version.clone().unwrap_or(String::from(SEMVER_LIGHTWEIGHT)),
                 ripple_context: None,
             }),
         ) {
@@ -105,7 +105,7 @@ impl TelemetryBuilder {
         Self::send_app_load_start(
             ps,
             "ripple".to_string(),
-            Some(String::from(SEMVER_LIGHTWEIGHT)),
+            Some(ps.version.clone().unwrap_or(String::from(SEMVER_LIGHTWEIGHT))),
             Some(ps.metrics.start_time),
         );
         Self::send_app_load_stop(ps, "ripple".to_string(), true);
diff --git a/core/main/src/state/bootstrap_state.rs b/core/main/src/state/bootstrap_state.rs
index 9deb400..9f78f1b 100644
--- a/core/main/src/state/bootstrap_state.rs
+++ b/core/main/src/state/bootstrap_state.rs
@@ -23,6 +23,7 @@ use ripple_sdk::{
     tokio::sync::mpsc::{self, Receiver, Sender},
     utils::error::RippleError,
 };
+use tokio_tungstenite::tungstenite::http::version;
 
 use crate::{
     bootstrap::manifest::{
@@ -34,6 +35,7 @@ use crate::{
 
 use super::{extn_state::ExtnState, platform_state::PlatformState};
 
+use env_file_reader::read_file;
 #[derive(Debug, Clone)]
 pub struct ChannelsState {
     gateway_channel: TransientChannel<FireboltGatewayCommand>,
@@ -108,8 +110,20 @@ impl BootstrapState {
         let extn_manifest = LoadExtnManifestStep::get_manifest();
         let extn_state = ExtnState::new(channels_state.clone(), extn_manifest.clone());
         let platform_state =
-            PlatformState::new(extn_manifest, device_manifest, client, app_manifest_result);
-
+            PlatformState::new(extn_manifest, device_manifest, client, app_manifest_result, ripple_version_from_etc());
+
+        fn ripple_version_from_etc() -> Option<String> {
+                /*
+                read /etc/rippleversion
+                */
+                static RIPPLE_VER_FILE_DEFAULT: &str = "/etc/rippleversion.txt";
+                static RIPPLE_VER_VAR_NAME_DEFAULT: &str = "RIPPLE_VER";
+                let version_file_name =
+                    std::env::var("RIPPLE_VERSIONS_FILE").unwrap_or(RIPPLE_VER_FILE_DEFAULT.to_string());
+                let version_var_name =
+                    std::env::var("RIPPLE_VERSIONS_VAR").unwrap_or(RIPPLE_VER_VAR_NAME_DEFAULT.to_string());
+                read_file(version_file_name.clone()).map(|res| res.get(&version_var_name).cloned()).ok()?
+            }
         Ok(BootstrapState {
             platform_state,
             channels_state,
diff --git a/core/main/src/state/platform_state.rs b/core/main/src/state/platform_state.rs
index cfec46b..5dfb7f4 100644
--- a/core/main/src/state/platform_state.rs
+++ b/core/main/src/state/platform_state.rs
@@ -103,6 +103,7 @@ pub struct PlatformState {
     pub data_governance: DataGovernanceState,
     pub metrics: MetricsState,
     pub device_session_id: DeviceSessionIdentifier,
+    pub version: Option<String>,
 }
 
 impl PlatformState {
@@ -111,6 +112,7 @@ impl PlatformState {
         manifest: DeviceManifest,
         client: RippleClient,
         app_library: Vec<AppLibraryEntry>,
+        version: Option<String>,
     ) -> PlatformState {
         let exclusory = ExclusoryImpl::get(&manifest);
 
@@ -129,6 +131,7 @@ impl PlatformState {
             data_governance: DataGovernanceState::default(),
             metrics: MetricsState::default(),
             device_session_id: DeviceSessionIdentifier::default(),
+            version,
         }
     }
 
@@ -236,6 +239,7 @@ mod tests {
                 manifest,
                 RippleClient::new(ChannelsState::new()),
                 vec![],
+                None,
             )
         }
     }
